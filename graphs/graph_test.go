package graphs

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestNewDirected(t *testing.T) {
	qw := NewDirected()
	assert.NotEqual(t, nil, qw.RemoveArc(5, 6), "there must be no arc to be removed")
	assert.NotEqual(t, nil, qw.RemoveVertex(5), "there must be no vertex to be removed ")
	_, err := qw.GetVertex(5)
	assert.NotEqual(t, nil, err, "error must be returned since there was no actual vertex")
	_, err = qw.GetArcs(5)
	assert.NotEqual(t, nil, err, "error must be returned since there was no actual arc")
	_, err = qw.GetAdjacents(5)
	assert.NotEqual(t, nil, err, "error must be returned since there was no actual vertex")
	_, err = qw.IsAdjacent(5, 6)
	assert.NotEqual(t, nil, err, "error must be returned since there was no actual vertex to be checked for adjacency")
	ok := qw.IsExist(5)
	assert.Equal(t, false, ok, "5 id vertex shouldn't be exist at the moment")

	err = qw.AddVertex(1)
	err = qw.AddVertex(2)
	err = qw.AddVertex(3)
	err = qw.AddVertex(4)
	err = qw.AddVertex(5)
	err = qw.AddVertex(5)
	assert.NotEqual(t, nil, err, "there must be an error for trying to add already exist vertex")
	err = qw.AddVertex(6)
	assert.Equal(t, 6, qw.Len().VertLen, "there must be 6 vertex at the moment")
	err = qw.AddArc(1, 2)
	err = qw.AddArc(1, 3)
	err = qw.AddArc(1, 4)
	err = qw.AddArc(1, 5)
	err = qw.AddArc(2, 5)
	err = qw.AddArc(3, 5)
	err = qw.AddArc(3, 5)
	assert.NotEqual(t, nil, err, "there must be an error for trying to add arc that already exist")
	err = qw.AddArc(4, 5)
	err = qw.AddArc(6, 5)
	assert.Equal(t, 8, qw.Len().ArcLen, "there must be 8 arcs at the moment")
	err = qw.RemoveArc(6, 5)
	err = qw.RemoveArc(4, 5)
	err = qw.RemoveArc(3, 5)
	assert.Equal(t, 5, qw.Len().ArcLen, "there must be 5 arcs at the moment")
	err = qw.AddArc(3, 5)
	err = qw.AddArc(4, 5)
	err = qw.AddArc(6, 5)

	_, err = qw.GetArcs(5)
	assert.Equal(t, nil, err, "it expected to return nil error normally")
	_, err = qw.GetVertex(5)
	assert.Equal(t, nil, err, "it is expected to return nil error normally")
	_, err = qw.GetAdjacents(5)
	assert.Equal(t, nil, err, "it is expected to return nil error normally")
	err = qw.AddVertex(15) //isolated vertex
	_, err = qw.IsAdjacent(15, 5)
	assert.Equal(t, NotAdjacentError, err, "it is expected to return NotAdjacentError")
	err = qw.AddArc(5, 6)

	err = qw.RemoveVertex(5)
	assert.Equal(t, 3, qw.Len().ArcLen, "there must be 3 arcs left at the moment")
	assert.Equal(t, 6, qw.Len().VertLen, "there must be 6 vertex left at the moment")
	err = qw.AddArc(5, 15)
	assert.NotEqual(t, nil, err, "there must be an error since vertex 5 is not exist")
	err = qw.RemoveArc(2, 4)
	assert.NotEqual(t, nil, err, "there must be an error since there is no arc between 2 and 4")
	adj, err := qw.GetAdjacents(1)
	assert.Equal(t, 3, adj.Total, "there must be 3 arcs totally all importer ")
}
